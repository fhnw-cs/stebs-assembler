package assembler;

import java.util.ArrayList;
import java.util.List;

 import assembler.support.Common;

/**
 * The class TokenList holds a list of token strings generated by a tokenizer.
 * 
 * @author ruedi.mueller
 */
public class TokenList {
  /**
   * List with all tokens their line number and position within the line
   * organised as follows:
   *  | line number (1 ..) | position in line (start number; 1...) | token | etc.
   *
   * Source example:
   *  Main:
   *      MOV   AL,12   ; comment
   *
   * Result example (as printed by toString() ):
   *   l: 1  p: 1  t: Main:
   *   l: 1  p: 6  t: \n
   *
   *   l: 2  p: 5  t: MOV
   *   l: 2  p: 11 t: AL
   *   l: 2  p: 13 t: ,
   *   l: 2  p: 14 t: 12
   *   l: 2  p: 19 t: ; comment
   *   l: 2  p: 28 t: \n
   */
  private List<String> tokenList = new ArrayList<String>();
  
  /**
   * Get a token.
   * 
   * @param index Token identified by its list index.
   * @return the token
   */
  public String get(int index) {
    return tokenList.get(index);
  }
  
  
  /**
   * Set END token.
   * 
   * @param index END token identified by its list index.
   */
  public void setEND(int index) {
    tokenList.set(index, "END");
  }
  
  
  /**
   * Set modified END token to be recognized by CodeListBuilder.
   * 
   * @param index END token to be modified and identified by its list index.
   */
  public void setModifiedEND(int index) {
    tokenList.set(index, Common.TEMP_END);
  }
  
  
  /**
   * Add a token.
   * 
   * @param token The token to add.
   */
  public void add(String token) {
    tokenList.add(token);
  }
  
  
  /**
   * Answer the size of the token list.
   * 
   * @return the size.
   */
  public int size() {
    return tokenList.size();
  }
  
  
  /**
   * Return a string representation of the token list.
   */
  public String toString() {
    if (tokenList.isEmpty()) {
      return "Empty token list";
    }
    StringBuilder sb = new StringBuilder();
    String oldLinenum = tokenList.get(0);
    
    for (int i = 0; i < tokenList.size(); i += 3) {
      if (!oldLinenum.equals(tokenList.get(i))) {
        sb.append("\n");
      }
      oldLinenum = tokenList.get(i);
      sb.append("l: " + tokenList.get(i) + "\t");
      sb.append("p: " + tokenList.get(i + 1) + "\t");
      sb.append("t: " + tokenList.get(i + 2));
      
      if (tokenList.get(i + 2) != Common.NL) {
        sb.append("\n");
      }
    }
    return sb.toString();
  }
}
